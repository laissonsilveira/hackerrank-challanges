'use strict';
const assert = require('assert');
let result;
/*
 * Complete the 'insertionSort1' function below.
 *
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER_ARRAY arr
 */
function insertionSort1(n, arr) {
    const position = n - 1;
    const beforePosition = position - 1;
    const valuePosition = arr[position];
    const valueBeforePosition = arr[beforePosition];
    if (valueBeforePosition > valuePosition) {
        arr[position] = valueBeforePosition;
        const str = arr.join(' ');
        console.log(str);
        result = `${result}\n${str}`;
        arr[beforePosition] = valuePosition;
    }
    if (position >= 0)
        insertionSort1(position, arr);
    else {
        const str = arr.join(' ');
        console.log(str);
        result = `${result}\n${str}`;
    }
}

function test(sizeArray, array, expected) {
    console.log('-------------------------------------');
    console.log('IN', sizeArray, '->', array);
    result = [];
    console.log('\nOUT');
    console.time();
    insertionSort1(sizeArray, array);
    console.timeEnd();
    assert.equal(result, expected);
    console.log('-------------------------------------');
}

test(5, [2, 4, 6, 8, 3], `
2 4 6 8 8
2 4 6 6 8
2 4 4 6 8
2 3 4 6 8`);

test(14, [1, 3, 5, 9, 13, 22, 27, 35, 46, 51, 55, 83, 87, 23], `
1 3 5 9 13 22 27 35 46 51 55 83 87 87
1 3 5 9 13 22 27 35 46 51 55 83 83 87
1 3 5 9 13 22 27 35 46 51 55 55 83 87
1 3 5 9 13 22 27 35 46 51 51 55 83 87
1 3 5 9 13 22 27 35 46 46 51 55 83 87
1 3 5 9 13 22 27 35 35 46 51 55 83 87
1 3 5 9 13 22 27 27 35 46 51 55 83 87
1 3 5 9 13 22 23 27 35 46 51 55 83 87`);

test(101, [2, 4, 8, 12, 15, 19, 21, 24, 26, 29, 30, 32, 35, 36, 41, 44, 49, 52, 57, 58, 59, 64, 65, 68, 73, 77, 80, 82, 85, 88, 93, 97, 101, 105, 108, 111, 115, 118, 122, 127, 130, 131, 132, 134, 135, 136, 138, 141, 144, 146, 151, 153, 158, 160, 165, 169, 171, 176, 179, 184, 187, 190, 194, 197, 200, 205, 210, 215, 217, 222, 225, 230, 231, 236, 239, 243, 244, 246, 248, 253, 254, 256, 258, 262, 263, 267, 272, 274, 277, 280, 284, 285, 289, 291, 295, 297, 301, 305, 310, 312, 279], `
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 310 312 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 310 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 295 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 291 295 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 289 291 295 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 285 289 291 295 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 284 285 289 291 295 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 280 284 285 289 291 295 297 301 305 310 312
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 279 280 284 285 289 291 295 297 301 305 310 312`);

console.log('Tests Success!');